# Snipinator

![Top language][9] ![GitHub License][3] [![PyPI - Version][4]][5]
[![Python Version][8]][5]

|         | Status                     |                                              |
| ------- | -------------------------- | -------------------------------------------- |
| Master  | [![Build and Test][1]][2]  | [![since tagged][6]][10] ![last commit][7]   |
| Develop | [![Build and Test][11]][2] | [![since tagged][12]][13] ![last commit][14] |

CLI to embed snippets from your {python,other} codebases into your `README.md`.

## What

What it does: Lets you make a `EXAMPLE.md` template and include snippets from
your (working and tested) python codebase.

Turn this (`{{ path('snipinator/examples/EXAMPLE.md.jinja2') }}`):

`{{ rawsnippet('snipinator/examples/EXAMPLE.md.jinja2', backtickify='md') }}`

Into this (`{{ path('snipinator/examples/EXAMPLE.generated.md') }}`):

`{{ rawsnippet('snipinator/examples/EXAMPLE.generated.md', backtickify='md') }}`

## Features

- Supports anything Jinja2 supports.
- First class support for python source code.
  - Can include python function signatures, docstrings, entire function source
    code, classes.
- Supports any language.
  - With delimiter markers, or entire inclusion of the entire file.
- First class support for markdown output (with backtickify, decomentify).
- Can include shell output.
  - Supports ANSI colors with SVG output.

## Getting Started

### Install

#### Tested on

- WSL2 Ubuntu 20.04, Python 3.8.0
- Ubuntu 20.04, Python 3.8.0, 3.9.0, 3.10.0, 3.11.0, 3.12.0, tested in GitHub
  Actions workflow
  ([build-and-test.yml](./.github/workflows/build-and-test.yml)).

**Requirements:**

- Linux-like environment
  - Why: Uses pexpect.spawn().
- Python 3.8+
  - Why: Some dev dependencies require Python 3.8+.

```bash
# Install from pypi (https://pypi.org/project/snipinator/)
pip install snipinator

# Install from git (https://github.com/realazthat/snipinator)
pip install git+https://github.com/realazthat/snipinator.git@v1.0.7
```

### Use

Example tempalte README:
[`{{path('snipinator/examples/EXAMPLE.md.jinja2')}}`](./snipinator/examples/EXAMPLE.md.jinja2):

`{{ rawsnippet('snipinator/examples/EXAMPLE.md.jinja2', backtickify='md') }}`

Generating the README:

`{{ shell('python -m snipinator.cli -t snipinator/examples/EXAMPLE.md.jinja2', backtickify='bash') }}`

CLI usage help:

<!--{{ shell('python -m snipinator.cli --help',
             rich='README.help.generated.svg',
             rich_alt='Output of `python -m snipinator.cli --help`',
             rich_bg_color='black',
             decomentify=True) }}-->

## Available Functions in Jinja2

`{{ pysignature(path='snipinator/snipinate.py', symbol='pysnippet', backtickify='py') }}`

`{{ pysignature(path='snipinator/snipinate.py', symbol='pysignature', backtickify='py') }}`

`{{ pysignature(path='snipinator/snipinate.py', symbol='rawsnippet', backtickify='py') }}`

`{{ pysignature(path='snipinator/snipinate.py', symbol='snippet', backtickify='py') }}`

`{{ pysignature(path='snipinator/snipinate.py', symbol='shell', backtickify='py') }}`

Also see Jinja2 v3
[Template Designer Documentation](https://jinja.palletsprojects.com/en/3.1.x/templates/).

## Gotchas

- **Security:** This tool is NOT designed to be used with untrusted input. It is
  designed to be used with your own codebase. Even when using your own input, be
  careful that your own code won't be doing anything that might inadvertently
  include untrusted input.
- Be careful to escape `{% raw %}{{{% endraw %}` and `{% raw %}}}{% endraw %}`,
  or `{% raw %}{%{% endraw %}` and `{% raw %}%}{% endraw %}` or anything jinja2
  is sensitive to, in the templates. You'll have to escape it properly for
  jinja2, which involves using `{% raw %}{% raw %}{% endraw %}` and
  `{% raw %}{%{% endraw %} endraw {% raw %}%}{% endraw %}` tags.
- Recursion: Snipinator doesn't directly support recursive inclusion of
  generated content. You can generate the contents of one file first, and
  include that generated content into another template. This would mean that you
  have to worry about order of generation.
- Embedded Backticks: If there are backticks in the included snippet, it might
  ruin the backticks you have in your markdown. This is why `backtickify`
  parameter exists in the API, so that Snipinator provides the backticks, and it
  will detect if there are backticks in the snippet and use a different number
  of backticks on the entire snippet. So if the snippet contains
  ```` ```My Snippet``` ````, Snipinator will use
  ````` ````language ```My Snippet``` ```` ````` and this is a method that
  Markdown uses to allow embedded backticks inside a code block.
- Formatting: The `{% raw %}{{{% endraw %}` `{% raw %}}}{% endraw %}` used to
  surround the snippet calls will unfortunately be formatted by a Markdown
  formatter and make the call invalid. Workarounds:
  - For code blocks: If you embed the snippet call in a code block, it will not
    be formatted. However, because of **Embedded Backticks** gotcha, (see
    above), this is not recommended, unless you know for sure that there are no
    embedded backticks.
  - If your formatter supports a comment that disabled formatting, you can
    surround the snippet call with that comment.
  - New in 1.0.4: Put the snippet call inside a HTML comment, then use
    `decommentify` parameter. See
    [`{{path('snipinator/examples/LONG-EXAMPLE.md.jinja2')}}`](./snipinator/examples/LONG-EXAMPLE.md.jinja2)
    for examples.
- Editing the wrong file: When you have a template and a generated file, it is
  easy to edit the wrong file. To combat this:
  - Snipinator provides a warning at the top of the generated file to remind you
    that it is auto-generated.
  - Snipinator will optionally chmod the file for you to make it read-only.
- Newlines: This program assumes LF newlines. I don't know if it will work for
  anything else.
- Combining `backtickify` and `indent`: Doesn't make much sense, but if you do
  it, it will run backtickify first, then indent everything including the
  backticks.

## Examples

- Snipinator's own `README` at
  [`{{path('./README.md.jinja2')}}`](./README.md.jinja2).
  - Generated: [`{{path('./README.md')}}`](./README.md).
  - Generation script:
    [`{{path('./scripts/generate-readme.sh')}}`](./scripts/generate-readme.sh).
- [`{{path('snipinator/examples/EXAMPLE.md.jinja2')}}`](./snipinator/examples/EXAMPLE.md.jinja2).
  - Generated:
    [`{{path('snipinator/examples/EXAMPLE.generated.md')}}`](./snipinator/examples/EXAMPLE.generated.md).
  - Generation script:
    [`{{path('./snipinator/examples/example.sh')}}`](./snipinator/examples/example.sh).
- [`{{path('snipinator/examples/LONG-EXAMPLE.md.jinja2')}}`](./snipinator/examples/LONG-EXAMPLE.md.jinja2).
  - Generated:
    [`{{path('snipinator/examples/LONG-EXAMPLE.generated.md')}}`](./snipinator/examples/LONG-EXAMPLE.generated.md).
  - Generation script:
    [`{{path('./snipinator/examples/long-example.sh')}}`](./snipinator/examples/long-example.sh).

## Thanks

Main libraries used in Snipinator are:

- Templating: [Jinja2](https://github.com/pallets/jinja).
- Snippet inclusion: Python's AST library.
- Colorful CLI help: [rich-argparse](https://github.com/hamdanal/rich-argparse).
- ANSI coloring shell output:
  {[pexpect](https://pexpect.readthedocs.io/en/stable/),
  [rich](https://github.com/Textualize/rich)}.

## Contributions

1. (Optionally) Fork the `develop` branch.
2. Stage your files: `git add path/to/file.py`.
3. `bash scripts/pre.sh`, this will format, lint, and test the code.
4. `git status` check if anything changed (generated README for example), if so,
   `git add` the changes, and go back to the previous step.
5. `git commit -m "..."`.
6. Make a PR to `develop` (or push to develop if you have the rights).

## Release Process

These instructions are for maintainers of the project.

1. `develop` branch: Run `bash scripts/pre.sh` to ensure everything is in order.
2. `develop` branch: Bump the version in setup.py, following semantic versioning
   principles.
3. `develop` branch: Change any reference to the old version (or tag) in the
   README.md to the new version.
4. `develop` branch: Commit these changes with a message like "Prepare release
   X.Y.Z". (See the contributions section [above](#contributions)).
5. `master` branch: Merge the `develop` branch into the `master` branch:
   `git checkout master && git merge develop --no-ff`.
6. `master` branch: Tag the release: Create a git tag for the release with
   `git tag -a vX.Y.Z -m "Version X.Y.Z"`.
7. Publish to PyPI: Publish the release to PyPI with
   `bash scripts/deploy-to-pypi.sh`.
8. Push to GitHub: Push the commit and tags to GitHub with `git push` and
   `git push --tags`.

[1]: https://github.com/realazthat/snipinator/actions/workflows/build-and-test.yml/badge.svg?branch=master
[2]: https://github.com/realazthat/snipinator/actions/workflows/build-and-test.yml
[3]: https://img.shields.io/github/license/realazthat/snipinator
[4]: https://img.shields.io/pypi/v/snipinator
[5]: https://pypi.org/project/snipinator/
[6]: https://img.shields.io/github/commits-since/realazthat/snipinator/v1.0.7/master
[7]: https://img.shields.io/github/last-commit/realazthat/snipinator/master
[8]: https://img.shields.io/pypi/pyversions/snipinator
[9]: https://img.shields.io/github/languages/top/realazthat/snipinator.svg?&cacheSeconds=28800
[10]: https://github.com/realazthat/snipinator/compare/v1.0.7...master
[11]: https://github.com/realazthat/snipinator/actions/workflows/build-and-test.yml/badge.svg?branch=develop
[12]: https://img.shields.io/github/commits-since/realazthat/snipinator/v1.0.7/develop
[13]: https://github.com/realazthat/snipinator/compare/v1.0.7...develop
[14]: https://img.shields.io/github/last-commit/realazthat/snipinator/develop
